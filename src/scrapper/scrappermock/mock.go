// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gufranmirza/imdb-cli/src/scrapper (interfaces: Scrapper)

// Package scrappermock is a generated GoMock package.
package scrappermock

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/gufranmirza/imdb-cli/src/models"
	reflect "reflect"
)

// MockScrapper is a mock of Scrapper interface
type MockScrapper struct {
	ctrl     *gomock.Controller
	recorder *MockScrapperMockRecorder
}

// MockScrapperMockRecorder is the mock recorder for MockScrapper
type MockScrapperMockRecorder struct {
	mock *MockScrapper
}

// NewMockScrapper creates a new mock instance
func NewMockScrapper(ctrl *gomock.Controller) *MockScrapper {
	mock := &MockScrapper{ctrl: ctrl}
	mock.recorder = &MockScrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScrapper) EXPECT() *MockScrapperMockRecorder {
	return m.recorder
}

// GetMovie mocks base method
func (m *MockScrapper) GetMovie(arg0 string) (*models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", arg0)
	ret0, _ := ret[0].(*models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie
func (mr *MockScrapperMockRecorder) GetMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockScrapper)(nil).GetMovie), arg0)
}

// GetTopMoviesURL mocks base method
func (m *MockScrapper) GetTopMoviesURL(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopMoviesURL", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopMoviesURL indicates an expected call of GetTopMoviesURL
func (mr *MockScrapperMockRecorder) GetTopMoviesURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopMoviesURL", reflect.TypeOf((*MockScrapper)(nil).GetTopMoviesURL), arg0)
}
